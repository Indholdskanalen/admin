<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use FOS\UserBundle\Model\GroupInterface;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser {
  /**
   * @var integer $id
   */
  protected $id;

  /**
   * Get id
   *
   * @return integer $id
   */
  public function getId() {
    return $this->id;
  }

  /**
   * @var ArrayCollection
   */
  protected $groups;

  /**
   * Constructor
   */
  public function __construct() {
    parent::__construct();
    $this->groups = new ArrayCollection();
  }


  /**
   * Is the user administrator
   *
   * @return boolean
   */
  public function isAdmin() {
    $result = FALSE;

    foreach ($this->getRoles() as $role) {
      if ($role == 'ROLE_ADMIN' || $role === 'ROLE_SUPER_ADMIN') {
        $result = TRUE;
      }
    }

    return $result;
  }

  /**
   * Is the user a super administrator
   *
   * @return boolean
   */
  public function isSuperAdmin() {
    $result = FALSE;

    foreach ($this->getRoles() as $role) {
      if ($role == 'ROLE_SUPER_ADMIN') {
        $result = TRUE;
      }
    }

    return $result;
  }

  /**
   * Add groups
   *
   * @param GroupInterface $groups
   * @return User
   */
  public function addGroup(GroupInterface $groups) {
    $this->groups[] = $groups;

    return $this;
  }

  /**
   * Remove groups
   *
   * @param GroupInterface $groups
   */
  public function removeGroup(GroupInterface $groups) {
    $this->groups->removeElement($groups);
  }

  /**
   * Get groups
   *
   * @return ArrayCollection
   */
  public function getGroups() {
    return $this->groups;
  }
}
