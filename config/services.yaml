# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: '%env(LOCALE)%'
    mailer_from_email: '%env(MAILER_FROM_EMAIL)%'
    mailer_from_name: '%env(MAILER_FROM_NAME)%'
    absolute_path_to_server: '%env(ABSOLUTE_PATH_TO_SERVER)%'
    zencoder_api: '%env(ZENCODER_API)%'
    sharing_host: '%env(SHARING_HOST)%'
    sharing_path: '%env(SHARING_PATH)%'
    sharing_apikey: '%env(SHARING_APIKEY)%'
    sharing_enabled: '%env(SHARING_ENABLED)%'
    search_host: '%env(SEARCH_HOST)%'
    search_path: '%env(SEARCH_PATH)%'
    search_apikey: '%env(SEARCH_APIKEY)%'
    search_index: '%env(SEARCH_INDEX)%'
    middleware_host: '%env(MIDDLEWARE_HOST)%'
    middleware_path: '%env(MIDDLEWARE_PATH)%'
    middleware_apikey: '%env(MIDDLEWARE_APIKEY)%'
    site_title: '%env(SITE_TITLE)%'
    version: '%env(VERSION)%'
    itk_log_version: '%env(ITK_LOG_VERSION)%'
    itk_log_error_callback: '%env(ITK_LOG_ERROR_CALLBACK)%'
    itk_log_log_to_console: '%env(ITK_LOG_TO_CONSOLE)%'
    itk_log_log_level: '%env(ITK_LOG_LEVEL)%'
    search_filter_default: '%env(SEARCH_FILTER_DEFAULT)%'
    itk_exchange_host: '%env(ITK_EXCHANGE_HOST)%'
    itk_exchange_user: '%env(ITK_EXCHANGE_USER)%'
    itk_exchange_password: '%env(ITK_EXCHANGE_PASSWORD)%'
    koba_apikey: '%env(KOBA_APIKEY)%'
    koba_path: '%env(KOBA_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
